# DSU Cleaning Code AAT 1-9-2024
library('tidyverse')
library('lubridate')
library('ggplot2')
library('tidyr')
library('patchwork')

# Convert SAMPLING_DATE from numeric to datetime.
df_noise$SAMPLING_DATE <- ymd(df_noise$SAMPLING_DATE)

# Create a new column and clean for toluene, xylene, lead, and noise 
# (will clean for PEL/AL noises by substance code later).
# I used grepl() to create new columns indicating T/F for the material present.
df_noise$Tol=grepl('TOLUEN', df_noise$SUBSTANCE_NAME)
df_noise$Xylene=grepl('XYLEN', df_noise$SUBSTANCE_NAME)
df_noise$Lead=grepl('LEAD', df_noise$SUBSTANCE_NAME)
df_noise$Noise=grepl('NOISE', df_noise$SUBSTANCE_NAME)
# Then, make a new, clean 'Material' variable using an 'ifelse' statement.
df_noise_c$Material <- 
  ifelse(df_noise_c$Tol == TRUE, 'Toluene',
         ifelse(df_noise_c$Xylene == TRUE, 'Xylene',
                ifelse(df_noise_c$Lead == TRUE, 'Lead',
                       ifelse(df_noise_c$Noise== TRUE, 'Noise', 'NA'))))

# Wide to long reshaping. Creating "Measurement" as a new column to store the 
# type of measurement (L500k-R8k) and 'hearing_loss' for hearing loss values. 
# This will allow us to view these measurements individually, side by side. 
# Then, we can refer to this single column, 'hearing_loss' to filter out NAs.

df_hearing2=
  pivot_longer(data= df_hearing,
               cols = columns, # calls the columns of interest we selected above
               names_to = "Measurement",  # new column name
               names_repair= "minimal", # allows duplicates in the output
               values_to = "hearing_loss")
# Remove rows with NAs for column "hearing_loss"
NoNAs_hearing= df_hearing2[complete.cases(df_hearing2[ , 10]),]
# Check to see if it worked
unique(is.na(NoNAs_hearing$hearing_loss))

# Finding matching NAICS codes between datasets
# The rationale for this is to have a comparable set of data in both datasets
# to hopefully present alongside each other for comparison.
# Remove rows where NAICS_CODE= NA first
df_noise= df_noise[-(is.na(df_noise$NAICS_CODE)), ]
# Check to see if the NAs are removed
is.na(df_noise$NAICS_CODE)
# intersect() finds the NAICS_CODE values in the noise dataset and the naics 
# values in the hearing dataset that match.
a= intersect(df_noise$NAICS_CODE, df_hearing$naics)
# 199 possible matches
# Creating a new column in each dataset to indicate matching or not.  
df_noise$Matches= ifelse(df_noise$NAICS_CODE== a, "Match", "Not a match")
df_hearing$Matches= ifelse(df_hearing$naics== a, "Match", "Not a match")

# Preliminary audiograms
# Set order of how measurements (x axis) will be printed on the plot (can split
# this into two 'level' expressions for left ear and right ear plots).
level=c('L500k', 'L1k', 'L2k', 'L3k', 'L4k', 'L6k', 'L8k')
level2= c('R500k', 'R1k', 'R2k', 'R3k', 'R4k', 'R6k', 'R8k')
# Divide the data into left ear and right ear measurements and plot.
plot1= 
  ggplot(subset1, aes(x= factor(Measurement, level=level), 
                        y= hearing_loss, 
                        group= nid, 
                        color= nid)) +
  geom_line() +
  theme(legend.position= "none") +
  labs(title= "Audiogram: Soft Drink 
       Manufacturing, 2010 data",      
       x= "Left ear measurements (Hz)",
       y= "Hearing level (dBHL)") +
  scale_y_reverse(limits=c(120, -10)) +
  geom_hline(yintercept=20) # to indicate threshold of normal hearing

plot2= 
  ggplot(subset2, aes(x= factor(Measurement, level=level2), 
                        y= hearing_loss, 
                        group= nid, 
                        color= nid)) +
  geom_line() +
  theme(legend.position= "none") +
  labs(title= "Audiogram: Soft Drink 
       Manufacturing, 2010 data",      
       x= "Right ear measurements (Hz)",
       y= "Hearing level (dBHL)") +
  scale_y_reverse(limits=c(120, -10)) +
  geom_hline(yintercept=20)
# Plot side by side
plot1 + plot2
